# -*- coding: utf-8 -*-
"""models

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ck5LLYKF_NBfxZQdGo82EaY7SQlSkw76
"""

# Code for the model described in the paper Show, Attend and Tell: Neural Image Caption Generation with Visual Attention
# http://arxiv.org/abs/1502.03044


import torch
import torch.nn as nn
import torchvision.models as models
from torch.autograd import Variable

MAX_LENGTH = 10

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


def cuda_variable(tensor):
    if torch.cuda.is_available():
        return Variable(tensor.cuda())
    else:
        return Variable(tensor)


class EncoderCNN(nn.Module):  ##Encoder
    def __init__(self, encoded_image_size=14):
        super(EncoderCNN, self).__init__()
        resnet = models.resnet101(pretrained=True)
        modules = list(resnet.children())[
                  :-2]  # It's not a classification task, hence removing the linear, pooling layers
        self.resnet = nn.Sequential(*modules)

        # Resizing the image to allow input images of variable size
        self.adaptive_pool = nn.AdaptiveAvgPool2d((encoded_image_size, encoded_image_size))
        self.fine_tune()


##Forward Propagation
# param images: images, a tensor of dimensions (batch_size, 3, image_size, image_size)
# return: encoded images
def forward(self, images):
    out = self.resnet(images)
    out = self.adaptive_pool(out)
    out = out.permute(0, 2, 3, 1)
    return out


# Allow or prevent the computation of gradients for convolutional blocks 2 through 4 of the encoder.
def fine_tune(self, fine_tune=True):
    for p in self.resnet.parameters():
        p.requires_grad = False
    # If fine-tuning, only fine-tune convolutional blocks 2 through 4
    for c in list(self.resnet.children())[5:]:
        for p in c.parameters():
            p.requires_grad = fine_tune


class Attention(nn.Module):  ##The Attention Network
    # encoder_dim: feature size of encoded images, decoder_dim: size of decoder's RNN, attention_dim: size of the attention network
    def __init__(self, encoder_dim, decoder_dim, attention_dim):
        super(Attention, self).__init__()
        self.encoder_att = nn.Linear(encoder_dim, attention_dim)
        self.decoder_att = nn.Linear(decoder_dim, attention_dim)
        self.full_att = nn.Linear(attention_dim, 1)
        self.relu = nn.ReLU()
        self.softmax = nn.Softmax(dim=1)

    # Forward Prop
    # encoder_out: encoded images, a tensor of dimension (batch_size, num_pixels, encoder_dim), decoder_hidden: previous decoder output, a tensor of dimension (batch_size, decoder_dim)
    # return: attention weighted encoding, weights
    def forward(self, encoder_out, decoder_hidden):
        att1 = self.encoder_att(encoder_out)
        att2 = self.decoder_att(decoder_hidden)
        att = self.full_att(self.relu(att1 + att2.unsqueeze(1))).squeeze(2)
        alpha = self.softmax(att)
        attention_weighted_encoding = (encoder_out * alpha.unsqueeze(2)).sum(dim=1)
        return attention_weighted_encoding, alpha


class AttnDecoderRNN(nn.Module):  # Decoder
    # attention_dim: size of attention network, embed_dim: embedding size, decoder_dim: size of decoder's RNN
    # vocab_size: size of vocabulary, encoder_dim: feature size of encoded images, dropout: dropout
    def __init__(self, attention_dim, embed_dim, decoder_dim, vocab_size, encoder_dim=2048, dropout=0.5):
        super(AttnDecoderRNN, self).__init__()
        self.encoder_dim = encoder_dim
        self.attention_dim = attention_dim
        self.embed_dim = embed_dim
        self.decoder_dim = decoder_dim
        self.vocab_size = vocab_size
        self.dropout = dropout

        self.attention = Attention(encoder_dim, decoder_dim, attention_dim)
        self.embedding = nn.Embedding(vocab_size, embed_dim)  # Embedding Layer
        self.dropout = nn.Dropout(p=self.dropout)
        self.decode_step = nn.LSTMCell(embed_dim + encoder_dim, decoder_dim, bias=True)
        self.init_h = nn.Linear(encoder_dim, decoder_dim)  # linear layer for initial hidden state of LSTM
        self.init_c = nn.Linear(encoder_dim, decoder_dim)  # linear layer for initial cell state of LSTM
        self.f_beta = nn.Linear(decoder_dim, encoder_dim)  # linear layer to create a sigmoid-activated gate
        self.sigmoid = nn.Sigmoid()
        self.fc = nn.Linear(decoder_dim, vocab_size)
        self.init_weights()


def init_weights(self):
    self.embedding.weight.data.uniform_(-0.1, 0.1)
    self.fc.bias.data.fill_(0)
    self.fc.weight.data.uniform_(-0.1, 0.1)


def load_pretrained_embeddings(self, embeddings):  # Loads embedding layer with pre-trained embeddings.
    self.embedding.weight = nn.Parameter(embeddings)


# Allow fine-tuning of the embedding layer unless using pre-trained embeddings
def fine_tune_embeddings(self, fine_tune=True):
    for p in self.embedding.parameters():
        p.requires_grad = fine_tune


# To create initial hidden and cell states for the decoder's LSTM based on the encoded images.
def init_hidden_state(self, encoder_out):
    mean_encoder_out = encoder_out.mean(dim=1)
    h = self.init_h(mean_encoder_out)
    c = self.init_c(mean_encoder_out)
    return h, c


def forward(self, encoder_out, encoded_captions, caption_lengths):  ##forward propagation
    # encoder_out: encoded images, a tensor of dimension (batch_size, enc_image_size, enc_image_size, encoder_dim)
    # encoded_captions: encoded captions, a tensor of dimension (batch_size, max_caption_length
    # caption_lengths: caption lengths, a tensor of dimension (batch_size, 1)
    # return: scores for vocabulary, sorted encoded captions, decode lengths, weights

    batch_size = encoder_out.size(0)
    encoder_dim = encoder_out.size(-1)
    vocab_size = self.vocab_size

    # to flatten the image
    encoder_out = encoder_out.view(batch_size, -1, encoder_dim)
    num_pixels = encoder_out.size(1)

    embeddings = self.embedding(encoded_captions)

    h, c = self.init_hidden_state(encoder_out)  # Initialize LSTM state

    decode_lengths = [c - 1 for c in caption_lengths]

    # Create tensors to hold word predicion scores and alphas
    predictions = torch.zeros(batch_size, max(decode_lengths), vocab_size).to(device)
    alphas = torch.zeros(batch_size, max(decode_lengths), num_pixels).to(device)

    # At each time-step, decode by attention-weighing the encoder's output based on the decoder's previous hidden state output and
    # then generate a new word in the decoder with the previous word and the attention weighted encoding
    for t in range(max(decode_lengths)):
        batch_size_t = sum([l > t for l in decode_lengths])
        attention_weighted_encoding, alpha = self.attention(encoder_out[:batch_size_t], h[:batch_size_t])
        gate = self.sigmoid(self.f_beta(h[:batch_size_t]))
        attention_weighted_encoding = gate * attention_weighted_encoding
        h, c = self.decode_step(
            torch.cat([embeddings[:batch_size_t, t, :], attention_weighted_encoding], dim=1),
            (h[:batch_size_t], c[:batch_size_t]))
        preds = self.fc(self.dropout(h))
        predictions[:batch_size_t, t, :] = preds
        alphas[:batch_size_t, t, :] = alpha

    return predictions, encoded_captions, decode_lengths, alphas
